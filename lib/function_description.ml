open Ctypes

(* This Types_generated module is an instantiation of the Types
   functor defined in the type_description.ml file. It's generated by
   a C program that Dune creates and runs behind the scenes. *)
module Types = Types_generated

module Functions (F: FOREIGN) =
  struct

    open F
    open Types
    module Fmpz =
      struct
        include Fmpz
        let init = foreign "fmpz_init" (t @-> returning void)
        let init_set = foreign "fmpz_init_set" (t @-> t @-> returning void)
        let clear = foreign "fmpz_clear" (t @-> returning void)

        let get_si = foreign "fmpz_get_si" (t @-> returning slong)
        let set_si = foreign "fmpz_set_si" (t @-> slong @-> returning void)
        let get_str = foreign "fmpz_get_str" (string @-> int @-> t @-> returning string)
        let set_str = foreign "fmpz_set_str" (t @-> string @-> int @-> returning int)

        let zero = foreign "fmpz_zero" (t @-> returning void)
        let one = foreign "fmpz_one" (t @-> returning void)
        let cmp =foreign "fmpz_cmp" (t @-> t @-> returning int)

        let is_pm1 = foreign "fmpz_is_pm1" (t @-> returning bool)
        let is_even = foreign "fmpz_is_even" (t @-> returning bool)
        let is_odd = foreign "fmpz_is_odd" (t @-> returning bool)

        let neg = foreign "fmpz_neg" (t @-> t @-> returning void)
        let abs = foreign "fmpz_abs" (t @-> t @-> returning void)
        let add = foreign "fmpz_add" (t @-> t @-> t @-> returning void)
        let sub = foreign "fmpz_sub" (t @-> t @-> t @-> returning void)
        let mul = foreign "fmpz_mul" (t @-> t @-> t @-> returning void)
        let tdiv_qr = foreign "fmpz_tdiv_qr" (t @-> t @-> t @-> t @-> returning void)

        let pow = foreign "fmpz_pow_fmpz" (t @-> t @-> t @-> returning int)

        let gcd = foreign "fmpz_gcd" (t @-> t @-> t @-> returning void)
        let lcm = foreign "fmpz_lcm" (t @-> t @-> t @-> returning void)

      end

    module Rand =
      struct
        include Rand
        let alloc = foreign "flint_rand_alloc" (void @-> returning t)
        let init = foreign  "flint_randinit" (t @-> returning void)
      end

    module Fmpz_poly =
      struct
        include Fmpz_poly
        let init = foreign "fmpz_poly_init" (t @-> returning void)
        let init2 = foreign "fmpz_poly_init2" (t @-> slong @-> returning void)
        let clear = foreign "fmpz_poly_clear" (t @-> returning void)

        let set = foreign "fmpz_poly_set" (t @-> t @-> returning void)
        let set_str = foreign "fmpz_poly_set_str" (t @-> string @-> returning int)
        let get_str = foreign "fmpz_poly_get_str" (t @-> returning string)
        let get_str_pretty = foreign "fmpz_poly_get_str_pretty" (t @-> string @-> returning string)

        let equal = foreign "fmpz_poly_equal" (t @-> t @-> returning bool)
        let is_unit = foreign "fmpz_poly_is_unit" (t @-> returning bool)
        let is_gen = foreign "fmpz_poly_is_gen" (t @-> returning bool)

        let randtest_not_zero = foreign "fmpz_poly_randtest_not_zero" (t @-> Rand.t @-> slong @-> int @-> returning void)

        let get_coeff_fmpz = foreign "fmpz_poly_get_coeff_fmpz" (Fmpz.t @-> t @-> slong @-> returning void)
        let set_coeff_fmpz = foreign "fmpz_poly_set_coeff_fmpz" (t @-> slong @-> Fmpz.t @-> returning void)

        let get_coeff_si = foreign "fmpz_poly_get_coeff_si" (t @-> slong @-> returning slong)
        let set_coeff_si = foreign "fmpz_poly_set_coeff_si" (t @-> slong @-> slong @-> returning void)

        let degree = foreign "fmpz_poly_degree" (t @-> returning slong);;
        let length = foreign "fmpz_poly_length" (t @-> returning slong);;

        let add = foreign "fmpz_poly_add" (t @-> t @-> t @-> returning void)
        let sub = foreign "fmpz_poly_sub" (t @-> t @-> t @-> returning void)
        let neg = foreign "fmpz_poly_neg" (t @-> t @-> returning void)

        let scalar_mul_si = foreign "fmpz_poly_scalar_mul_si" (t @-> t @-> slong @-> returning void)
        let scalar_mul_fmpz = foreign "fmpz_poly_scalar_mul_fmpz" (t @-> t @-> Fmpz.t @-> returning void)
        let mul = foreign "fmpz_poly_mul" (t @-> t @-> t  @-> returning void)
        let pow = foreign "fmpz_poly_pow" (t @-> t @-> ulong @-> returning void)

        let gcd = foreign "fmpz_poly_gcd" (t @-> t @-> t @-> returning void)
        let lcm = foreign "fmpz_poly_lcm" (t @-> t @-> t @-> returning void)

        let div_rem = foreign "fmpz_poly_divrem" (t @-> t @-> t @-> t @-> returning void)

        let derivative = foreign "fmpz_poly_derivative" (t @-> t  @-> returning void)

        let evaluate_fmpz = foreign "fmpz_poly_evaluate_fmpz" (Fmpz.t @-> t @-> Fmpz.t @-> returning void)
      end

    module Fmpz_mat =
      struct
        include Fmpz_mat
      end

    module Fmpz_poly_mat =
      struct
        include Fmpz_poly_mat
        let init = foreign "fmpz_poly_mat_init" (t @-> slong @-> slong @-> returning void)
        let clear = foreign "fmpz_poly_mat_clear" (t @-> returning void)

        let ncols = foreign "fmpz_poly_mat_ncols" (t @->  returning slong)
        let nrows = foreign "fmpz_poly_mat_nrows" (t @->  returning slong)
        let is_square = foreign "fmpz_poly_mat_is_square" (t @->  returning int)
        let equal = foreign "fmpz_poly_mat_equal" (t @-> t @->  returning int)

        let zero = foreign "fmpz_poly_mat_zero" (t @-> returning void)
        let one = foreign "fmpz_poly_mat_one" (t @-> returning void)

        let entry = foreign "fmpz_poly_mat_entry" (t @-> slong @-> slong @-> returning Fmpz_poly.t)

        let transpose = foreign "fmpz_poly_mat_transpose" (t @-> t @-> returning void)
        let evaluate_fmpz = foreign "fmpz_poly_mat_evaluate_fmpz" (Fmpz_mat.t @-> t @-> Fmpz.t @-> returning void)

        let scalar_mul_poly = foreign "fmpz_poly_mat_scalar_mul_fmpz_poly" (t @-> t @-> Fmpz_poly.t @-> returning void)
        let scalar_mul_fmpz = foreign "fmpz_poly_mat_scalar_mul_fmpz" (t @-> t @-> Fmpz.t @-> returning void)
        let add = foreign "fmpz_poly_mat_add" (t @-> t @-> t @-> returning void)
        let sub = foreign "fmpz_poly_mat_sub" (t @-> t @-> t @-> returning void)
        let neg = foreign "fmpz_poly_mat_neg" (t @-> t @-> returning void)
        let mul = foreign "fmpz_poly_mat_mul" (t @-> t @-> t @-> returning void)
        let pow = foreign "fmpz_poly_mat_pow" (t @-> t @-> ulong @-> returning void)

        let trace = foreign "fmpz_poly_mat_trace" (Fmpz_poly.t @-> t @-> returning void)
        let det = foreign "fmpz_poly_mat_det" (Fmpz_poly.t @-> t @-> returning void)
        let inv = foreign "fmpz_poly_mat_inv" (t @-> Fmpz_poly.t @-> t @-> returning int)

      end

    module Mpoly =
      struct
        include Mpoly
        module Ordering =
          struct
            include Ordering
            let print = foreign  "mpoly_ordering_print" (t @-> returning void)
          end
        module Ctx =
          struct
            include Ctx
            let isdeg = foreign "mpoly_ordering_isdeg" (t @-> returning bool)
            let isrev = foreign "mpoly_ordering_isrev" (t @-> returning bool)

            let init = foreign "mpoly_ctx_init" (t @-> slong @-> Ordering.t @-> returning void)
            let init_rand = foreign "mpoly_ctx_init_rand" (t @-> Rand.t @-> slong @-> returning void)
            let clear = foreign "mpoly_ctx_clear" (t @-> returning void)
          end
      end

    module Fmpz_mpoly =
      struct
        include Fmpz_mpoly
        module Ctx =
          struct
            include Ctx

            let init = foreign "fmpz_mpoly_ctx_init" (t @-> slong @-> Ordering.t @->  returning void)
            let init_rand = foreign "fmpz_mpoly_ctx_init_rand" (t @-> Rand.t @-> slong @->  returning void)
            let nvars = foreign "fmpz_mpoly_ctx_nvars" (t @-> returning long)
            let ord = foreign "fmpz_mpoly_ctx_ord" (t @-> returning Ordering.t)
            let clear = foreign "fmpz_mpoly_ctx_clear" (t @-> returning void)
          end

        let init = foreign "fmpz_mpoly_init" (t @-> Ctx.t @-> returning void)
        let init2 = foreign "fmpz_mpoly_init2" (t @-> slong @-> Ctx.t @-> returning void)
        let clear = foreign "fmpz_mpoly_clear" (t @-> Ctx.t @-> returning void)

        let get_str_pretty = foreign "fmpz_mpoly_get_str_pretty" (t @-> ptr string @-> Ctx.t @-> returning string)
        let set_str_pretty = foreign "fmpz_mpoly_set_str_pretty" (t @-> string @-> ptr string @-> Ctx.t @-> returning int)

        (* Basic Manipulation *)
        let gen = foreign "fmpz_mpoly_gen" (t @-> slong @-> Ctx.t @-> returning void)
        let is_gen = foreign "fmpz_mpoly_is_gen" (t @-> slong @-> Ctx.t  @-> returning bool)
        let set = foreign "fmpz_mpoly_set" (t @-> t @-> Ctx.t @-> returning void)
        let equal = foreign "fmpz_mpoly_equal" (t @-> t @-> Ctx.t @-> returning bool)
        let swap = foreign "fmpz_mpoly_swap" (t @-> t @-> Ctx.t @-> returning void)
        let max_bits = foreign "fmpz_mpoly_max_bits" (t @-> returning slong)

        (* Constants *)
        let is_fmpz = foreign "fmpz_mpoly_is_fmpz" (t @-> Ctx.t @-> returning bool)
        let get_fmpz = foreign "fmpz_mpoly_get_fmpz" (Fmpz.t @-> t @-> Ctx.t @-> returning void)
        let set_fmpz = foreign "fmpz_mpoly_set_fmpz" (t @-> Fmpz.t @-> Ctx.t @-> returning void)
        let set_ui = foreign "fmpz_mpoly_set_ui" (t @-> ulong @-> Ctx.t @-> returning void)
        let set_si = foreign "fmpz_mpoly_set_si" (t @-> slong @-> Ctx.t @-> returning void)
        let zero = foreign "fmpz_mpoly_zero" (t @-> Ctx.t @-> returning void)
        let one = foreign "fmpz_mpoly_one" (t @-> Ctx.t @-> returning void)

        let equal_fmpz = foreign "fmpz_mpoly_equal_fmpz" (t @-> Fmpz.t @-> Ctx.t @-> returning bool)
        let equal_ui = foreign "fmpz_mpoly_equal_ui" (t @-> ulong @-> Ctx.t @-> returning bool)
        let equal_si = foreign "fmpz_mpoly_equal_si" (t @-> slong @-> Ctx.t @-> returning bool)
        let is_zero = foreign "fmpz_mpoly_is_zero" (t @-> Ctx.t @-> returning bool)
        let is_one = foreign "fmpz_mpoly_is_one" (t @-> Ctx.t @-> returning bool)

        (* Degrees *)
        let degrees_fit_si = foreign "fmpz_mpoly_degrees_fit_si" (t @-> Ctx.t @-> returning bool)
        let degrees_fmpz = foreign "fmpz_mpoly_degrees_fmpz" (ptr Fmpz.t @-> t @-> Ctx.t @-> returning void)
        let degrees_si = foreign "fmpz_mpoly_degrees_si" (ptr slong @-> t @-> Ctx.t @-> returning void)
        let degree_fmpz = foreign "fmpz_mpoly_degree_fmpz" (Fmpz.t @-> t @-> slong @-> Ctx.t @-> returning void)
        let degree_si = foreign "fmpz_mpoly_degree_si" (t @-> slong @-> Ctx.t @-> returning slong)
        let total_degree_fits_si = foreign "fmpz_mpoly_total_degree_fits_si" (t @-> Ctx.t @-> returning bool)
        let used_vars = foreign "fmpz_mpoly_used_vars" (ptr int @-> t @-> Ctx.t @-> returning void)

        (* Coefficients *)
        let get_coeff_fmpz_monomial = foreign "fmpz_mpoly_get_coeff_fmpz_monomial" (Fmpz.t @-> t @-> t @-> Ctx.t @-> returning void)
        let set_coeff_fmpz_monomial = foreign "fmpz_mpoly_set_coeff_fmpz_monomial" (t @-> Fmpz.t @-> t @-> Ctx.t @-> returning void)
        let get_coeff_fmpz_fmpz = foreign "fmpz_mpoly_get_coeff_fmpz_fmpz" (Fmpz.t @-> t @-> ptr Fmpz.t @-> Ctx.t @-> returning void)
        let get_coeff_ui_fmpz = foreign "fmpz_mpoly_get_coeff_ui_fmpz" (t @-> ptr Fmpz.t @-> Ctx.t @-> returning ulong)
        let get_coeff_si_fmpz = foreign "fmpz_mpoly_get_coeff_si_fmpz" (t @-> ptr Fmpz.t @-> Ctx.t @-> returning slong)
        let get_coeff_fmpz_ui = foreign "fmpz_mpoly_get_coeff_fmpz_ui" (Fmpz.t @-> t @-> ptr ulong @-> Ctx.t @-> returning void)
        let get_coeff_ui_ui = foreign "fmpz_mpoly_get_coeff_ui_ui" (t @-> ptr ulong @-> Ctx.t @-> returning ulong)
        let get_coeff_si_ui = foreign "fmpz_mpoly_get_coeff_si_ui" (t @-> ptr ulong @-> Ctx.t @-> returning slong)

        let set_coeff_fmpz_fmpz = foreign "fmpz_mpoly_set_coeff_fmpz_fmpz" (t @-> Fmpz.t @-> ptr Fmpz.t @-> Ctx.t @-> returning void)
        let set_coeff_ui_fmpz = foreign "fmpz_mpoly_set_coeff_ui_fmpz" (t @-> ulong @-> ptr Fmpz.t @-> Ctx.t @-> returning void)
        let set_coeff_si_fmpz = foreign "fmpz_mpoly_set_coeff_si_fmpz" (t @-> slong @-> ptr Fmpz.t @-> Ctx.t @-> returning void)
        let set_coeff_fmpz_ui = foreign "fmpz_mpoly_set_coeff_fmpz_ui" (t @-> Fmpz.t @-> ptr ulong @-> Ctx.t @-> returning void)
        let set_coeff_ui_ui = foreign "fmpz_mpoly_set_coeff_ui_ui" (t @-> ulong @-> ptr ulong @-> Ctx.t @-> returning void)
        let set_coeff_si_ui = foreign "fmpz_mpoly_set_coeff_si_ui" (t @-> slong @-> ptr ulong @-> Ctx.t @-> returning void)

        let get_coeff_vars_ui = foreign "fmpz_mpoly_get_coeff_vars_ui" (t @-> t @-> ptr slong @-> ptr ulong @-> slong @-> Ctx.t @-> returning void)

        (* Comparison *)
        let cmp = foreign "fmpz_mpoly_cmp" (t @-> t @-> Ctx.t @-> returning int)
        (* Container Operations *)
        let length = foreign "fmpz_mpoly_length" (t @-> Ctx.t @-> returning slong)
        (* Random Generation *)
        let randtest_bound = foreign "fmpz_mpoly_randtest_bound" (t @-> Rand.t @-> slong @-> mp_limb_t @-> ulong @-> Ctx.t @-> returning void)
        let randtest_bounds = foreign "fmpz_mpoly_randtest_bounds" (t @-> Rand.t @-> slong @-> mp_limb_t @-> ptr ulong @-> Ctx.t @-> returning void)
        let randtest_bits = foreign "fmpz_mpoly_randtest_bits" (t @-> Rand.t @-> slong @-> mp_limb_t @-> mp_limb_t @-> Ctx.t @-> returning void)
        (* Ring Operations *)
        let add_fmpz = foreign "fmpz_mpoly_add_fmpz" (t @-> t @-> Fmpz.t @-> Ctx.t @-> returning void)
        let add_ui = foreign "fmpz_mpoly_add_ui" (t @-> t @-> ulong @-> Ctx.t @-> returning void)
        let add_si = foreign "fmpz_mpoly_add_si" (t @-> t @-> slong @-> Ctx.t @-> returning void)
        let sub_fmpz = foreign "fmpz_mpoly_sub_fmpz" (t @-> t @-> Fmpz.t @-> Ctx.t @-> returning void)
        let sub_ui = foreign "fmpz_mpoly_sub_ui" (t @-> t @-> ulong @-> Ctx.t @-> returning void)
        let sub_si = foreign "fmpz_mpoly_sub_si" (t @-> t @-> slong @-> Ctx.t @-> returning void)

        let add = foreign "fmpz_mpoly_add" (t @-> t @-> t @-> Ctx.t @-> returning void)
        let sub = foreign "fmpz_mpoly_sub" (t @-> t @-> t @-> Ctx.t @-> returning void)
        let neg = foreign "fmpz_mpoly_neg" (t @-> t @-> Ctx.t @-> returning void)

        let mul = foreign "fmpz_mpoly_mul" (t @-> t @-> t @-> Ctx.t @-> returning void)
        let mul_johnson = foreign "fmpz_mpoly_mul_johnson" (t @-> t @-> t @-> Ctx.t @-> returning void)
        let mul_heap_threaded = foreign "fmpz_mpoly_mul_heap_threaded" (t @-> t @-> t @-> Ctx.t @-> returning void)
        let mul_array = foreign "fmpz_mpoly_mul_array" (t @-> t @-> t @-> Ctx.t @-> returning bool)
        let mul_array_threaded = foreign "fmpz_mpoly_mul_array_threaded" (t @-> t @-> t @-> Ctx.t @-> returning bool)
        let mul_dense = foreign "fmpz_mpoly_mul_dense" (t @-> t @-> t @-> Ctx.t @-> returning bool)

        let pow_fmpz = foreign "fmpz_mpoly_pow_fmpz" (t @-> t @-> Fmpz.t @-> Ctx.t @-> returning bool)
        let pow_ui = foreign "fmpz_mpoly_pow_ui" (t @-> t @-> ulong @-> Ctx.t @-> returning bool)

        let divides = foreign "fmpz_mpoly_divides" (t @-> t @-> t @-> Ctx.t @-> returning bool)
        let divrem = foreign "fmpz_mpoly_divrem" (t @-> t @-> t @-> t @-> Ctx.t @-> returning void)
        let quasidivrem = foreign "fmpz_mpoly_quasidivrem" (Fmpz.t @-> t @-> t @-> t @-> t @-> Ctx.t @-> returning void)
        let div = foreign "fmpz_mpoly_div" (t @-> t @-> t @-> Ctx.t @-> returning void)
        let quasidiv = foreign "fmpz_mpoly_quasidiv" (Fmpz.t @-> t @-> t @-> t @-> Ctx.t @-> returning void)
        let divrem_ideal = foreign "fmpz_mpoly_divrem_ideal" (ptr t @-> t @-> t @-> ptr t @-> slong @-> Ctx.t @-> returning void)
        let quasidivrem_ideal = foreign "fmpz_mpoly_quasidivrem_ideal" (Fmpz.t @-> ptr t @-> t @-> t @-> ptr t @-> slong @-> Ctx.t @-> returning void)

        let scalar_mul_fmpz = foreign "fmpz_mpoly_scalar_mul_fmpz" (t @-> t @-> Fmpz.t @-> Ctx.t @-> returning void)
        let scalar_mul_ui = foreign "fmpz_mpoly_scalar_mul_ui" (t @-> t @-> ulong @-> Ctx.t @-> returning void)
        let scalar_mul_si = foreign "fmpz_mpoly_scalar_mul_si" (t @-> t @-> slong @-> Ctx.t @-> returning void)

        let scalar_fmma = foreign "fmpz_mpoly_scalar_fmma" (t @-> t @-> Fmpz.t @-> t @-> Fmpz.t @-> Ctx.t @-> returning void)

        let scalar_divexact_fmpz = foreign "fmpz_mpoly_scalar_divexact_fmpz" (t @-> t @-> Fmpz.t @-> Ctx.t @-> returning void)
        let scalar_divexact_ui = foreign "fmpz_mpoly_scalar_divexact_ui" (t @-> t @-> ulong @-> Ctx.t @-> returning void)
        let scalar_divexact_si = foreign "fmpz_mpoly_scalar_divexact_si" (t @-> t @-> slong @-> Ctx.t @-> returning void)

        let scalar_divides_fmpz = foreign "fmpz_mpoly_scalar_divides_fmpz" (t @-> t @-> Fmpz.t @-> Ctx.t @-> returning bool)
        let scalar_divides_ui = foreign "fmpz_mpoly_scalar_divides_ui" (t @-> t @-> ulong @-> Ctx.t @-> returning bool)
        let scalar_dividies_si = foreign "fmpz_mpoly_scalar_divides_si" (t @-> t @-> slong @-> Ctx.t @-> returning bool)

        let derivative = foreign "fmpz_mpoly_derivative" (t @-> t @-> slong @-> Ctx.t @-> returning void)
        let integral = foreign "fmpz_mpoly_integral" (t @-> Fmpz.t @-> t @-> slong @-> Ctx.t @-> returning void)

        (* Evaluation *)
        let evaluate_all_fmpz = foreign "fmpz_mpoly_evaluate_all_fmpz" (Fmpz.t @-> t @-> ptr Fmpz.t @-> Ctx.t @-> returning bool)
        let evaluate_one_fmpz = foreign "fmpz_mpoly_evaluate_one_fmpz" (t @-> t @-> slong @-> Fmpz.t @-> Ctx.t @-> returning bool)

        let compose_fmpz_poly = foreign "fmpz_mpoly_compose_fmpz_poly" (Fmpz_poly.t @-> t @-> ptr Fmpz_poly.t @-> Ctx.t @-> returning bool)
        let compose_fmpz_mpoly = foreign "fmpz_mpoly_compose_fmpz_mpoly" (t @-> t @-> ptr t @-> Ctx.t @-> Ctx.t @-> returning bool)
        let compose_fmpz_mpoly_gen = foreign "fmpz_mpoly_compose_fmpz_mpoly_gen" (t @-> t @-> ptr slong @-> Ctx.t @-> Ctx.t @-> returning void)

        (* GCD *)
        let term_content = foreign "fmpz_mpoly_term_content" (t @-> t @-> Ctx.t @-> returning void)
        let content_vars = foreign "fmpz_mpoly_content_vars" (t @-> t @-> ptr slong @-> slong @-> Ctx.t @-> returning bool)
        let gcd = foreign "fmpz_mpoly_gcd" (t @-> t @-> t @-> Ctx.t @-> returning bool)
        let gcd_cofactors = foreign "fmpz_mpoly_gcd_cofactors" (t @-> t @-> t @-> t @-> t @-> Ctx.t @-> returning bool)
        let resultant = foreign "fmpz_mpoly_resultant" (t @-> t @-> t @-> slong @-> Ctx.t @-> returning bool)
        let discriminant = foreign "fmpz_mpoly_discriminant" (t @-> t @-> slong @-> Ctx.t @-> returning bool)

        (*Square Root *)
        let sqrt_heap = foreign "fmpz_mpoly_sqrt_heap" (t @-> t @-> Ctx.t @-> bool @-> returning bool)
        let sqrt = foreign "fmpz_mpoly_sqrt" (t @-> t @-> Ctx.t @-> returning bool)
        let is_square = foreign "fmpz_mpoly_is_square" (t @-> Ctx.t @-> returning bool)

      end
  end
